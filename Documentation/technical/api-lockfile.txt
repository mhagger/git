lockfile API
============

The lockfile API serves two purposes:

* Mutual exclusion.  When we write out a new index file, first
  we create a new file `$GIT_DIR/index.lock`, write the new
  contents into it, and rename it to the final destination
  `$GIT_DIR/index`.  We try to create the `$GIT_DIR/index.lock`
  file with O_EXCL so that we can notice and fail when somebody
  else is already trying to update the index file.

* Automatic cruft removal.  After we create the "lock" file, we
  may decide to `die()`, and we would want to make sure that we
  remove the file that has not been committed to its final
  destination.  This is done by remembering the lockfiles we
  created in a linked list and cleaning them up from an
  `atexit(3)` handler.  Outstanding lockfiles are also removed
  when the program dies on a signal.


The functions
-------------

hold_lock_file_for_update::

	Take a pointer to `struct lock_file`, the filename of
	the final destination (e.g. `$GIT_DIR/index`) and a flag
	`die_on_error`.  Attempt to create a lockfile for the
	destination and return the file descriptor for writing
	to the file.  The flags parameter is a combination of
+
--
LOCK_NODEREF::

	Usually symbolic links in path are resolved in path and the
	lockfile is created by adding ".lock" to the resolved path;
	however, if `LOCK_NODEREF` is set, then the lockfile is
	created by adding ".lock" to the path argument itself.

LOCK_DIE_ON_ERROR::

	If a lock is already taken for the file, `die()` with an error
	message.  If this option is not specified, return a negative
	integer to the caller on failure.

LOCK_SEPARATE_STAGING_FILE::

	Use a separate file (not the lockfile) for staging the new
	file contents.  This option makes it possible to call
	activate_staging_file() to overwrite the old file while
	retaining the file lock.
--

hold_lock_file_for_append::

	Like `hold_lock_file_for_update()`, except that additionally
	the existing contents of the file (if any) are copied to the
	lockfile and its write pointer is positioned at the end of the
	file before returning.

unable_to_lock_error::

	Emit an error describing that there was an error locking the
	specified path.  The err parameter should be the errno of the
	problem that caused the failure.

unable_to_lock_index_die::

	Like `unable_to_lock_error()`, but also `die()`.

commit_lock_file::

	Take a pointer to the `struct lock_file` initialized with an
	earlier call to `hold_lock_file_for_update()` or
	`hold_lock_file_for_append()`.  Close the file descriptor.
	Then, if the lock was created with the
	LOCK_SEPARATE_STAGING_FILE flag, rename the staging file on
	top of the locked file (if `activate_staging_file()` hasn't
	already been called) and delete the lockfile; otherwise,
	rename the lockfile to its final destination.  Returns 0 upon
	success, a negative value on failure to close(2) or rename(2).

activate_staging_file::

	Write the contents of the separate staging file over those of
	the locked file while retaining the lock.  This function may
	only be called if the lock was created with the
	LOCK_SEPARATE_STAGING_FILE flag.

rollback_lock_file::

	Take a pointer to the `struct lock_file` initialized with an
	earlier call to `hold_lock_file_for_update()`, close the file
	descriptor, remove the separate staging file (if any), and
	remove the lockfile.  Please note that if
	`activate_staging_file()` has already been called, then the
	contents committed at that time will remain active.

close_lock_file::
	Take a pointer to the `struct lock_file` initialized
	with an earlier call to `hold_lock_file_for_update()`,
	and close the file descriptor.  Returns 0 upon success,
	a negative value on failure to close(2).  This function must
	only be called if the lock was created without the
	LOCK_SEPARATE_STAGING_FILE flag.

Because the structure is used in an `atexit(3)` handler, its
storage has to stay throughout the life of the program.  It
cannot be an auto variable allocated on the stack.

Call `commit_lock_file()` or `rollback_lock_file()` when you are
done writing to the file descriptor.  If you do not call either
and simply `exit(3)` from the program, an `atexit(3)` handler
will close and remove the lockfile.

If you need to close the file descriptor you obtained from
`hold_lock_file_for_update` function yourself, do so by calling
`close_lock_file()`.  You should never call `close(2)` yourself!
Otherwise the `struct lock_file` structure still remembers that the
file descriptor needs to be closed, and a later call to
`commit_lock_file()` or `rollback_lock_file()` will result in
duplicate calls to `close(2)`.  Worse yet, if you `close(2)`, open
another file descriptor for completely different purpose, and then
call `commit_lock_file()` or `rollback_lock_file()`, they may close
that unrelated file descriptor.
